package structs

import (
	"encoding/json"
	errors2 "github.com/lusantisuper/api-rede-golang/apierr"
	"github.com/lusantisuper/api-rede-golang/utils"
)

type Request struct {
	// Optional: Define true if you want the request to be automatic captured
	Capture bool `json:"Capture"`
	// Optional: Payment method -> "credit" and "debit"
	Kind string `json:"Kind"`
	// Task code generated by the establishment
	Reference string `json:"Reference"`
	// Price of the product R$10,00 = 1000
	Amount int `json:"Amount"`
	// Optional: Number of payments in installments -> 2 until 12
	// Not setting this value make the one time pay
	Installments int `json:"Installments"`
	// Optional: Name for the card's owner
	CardHolderName string `json:"CardHolderName"`
	// Card's number
	CardNumber int `json:"CardNumber"`
	// Expiration month -> 1 until 12
	ExpirationMonth int `json:"ExpirationMonth"`
	// Expiration year -> could be 2021 or 21
	ExpirationYear int `json:"ExpirationYear"`
	// Optional: Card's security code
	SecurityCode int `json:"SecurityCode"`
	// Optional: This string will be printed on the bill
	SoftDescriptor string `json:"SoftDescriptor"`
	// Optional: Is it a subscription? This is only a log, the payment need to be redone every time the store wants
	Subscription bool `json:"Subscription"`
	// TODO
	origin int
	// PV number
	DistributorAffiliation int `json:"DistributorAffiliation"`
	// TODO
	brandTid string
}

// Return a valid json
func (r Request) ToJson() (string, error) {
	result := Request{
		Capture:                r.Capture,
		Kind:                   r.Kind,
		Reference:              r.Reference,
		Amount:                 r.Amount,
		Installments:           r.Installments,
		CardHolderName:         r.CardHolderName,
		CardNumber:             r.CardNumber,
		ExpirationMonth:        r.ExpirationMonth,
		ExpirationYear:         r.ExpirationYear,
		SecurityCode:           r.SecurityCode,
		SoftDescriptor:         r.SoftDescriptor,
		Subscription:           r.Subscription,
		origin:                 r.origin,
		DistributorAffiliation: r.DistributorAffiliation,
		brandTid:               r.brandTid,
	}

	// Adding all necessary parameters
	if utils.IsStringEmpty(r.Reference) {
		return "", errors2.ApiErr(errors2.INSUFFICIENTPARAMETERS)
	}
	if r.Amount < 0 || r.Amount > 1000000000 {
		return "", errors2.ApiErr(errors2.WRONGAMOUNT)
	}
	if r.CardNumber == 0 {
		return "", errors2.ApiErr(errors2.INSUFFICIENTPARAMETERS)
	}
	if r.ExpirationMonth < 0 || r.ExpirationMonth > 12 {
		return "", errors2.ApiErr(errors2.WRONGDATENUMBER)
	}
	if r.ExpirationYear < 20 || r.ExpirationYear > 60 {
		return "", errors2.ApiErr(errors2.WRONGDATENUMBER)
	}
	if r.DistributorAffiliation == 0 {
		return "", errors2.ApiErr(errors2.INSUFFICIENTPARAMETERS)
	}

	// Adding all optional parameters
	if !r.Capture {
		result.Capture = false
	}
	if !utils.IsStringEmpty(r.Kind) {
		result.Kind = r.Kind
	}
	if r.Installments >= 2 && r.Installments <= 12 {
		result.Installments = r.Installments
	} else {
		result.Installments = 1
	}
	if !utils.IsStringEmpty(r.CardHolderName) {
		result.CardHolderName = r.CardHolderName
	}
	if !utils.IsStringEmpty(r.SoftDescriptor) {
		result.SoftDescriptor = r.SoftDescriptor
	}

	jsonResult, err := json.Marshal(result)
	return string(jsonResult), err
}
